@page "/jugar/{name}"
@inject IGameService _gameService

@if (_isLoading)
{
    <div class="spinner screen-centered"></div>
}
else
{
    if (_game is null)
    {
        <Error Title="¡Ups! No pudimos encontrar el juego que elegiste" Message="Lo sentimos, te invitamos a probar algún otro juego de nuestro catálogo" />
    }
    else
    {
        <h2 class="gameplay-title">@_game.Name</h2>
        <div class="gameplay-main-container">
            <Ad Type="AdType.Ad160x600" />
            <div class="game-with-ad">
                <GamePlayBox Game="_game" />
                <Ad Type="AdType.Ad970x90" />
            </div>
            <Ad Type="AdType.Ad160x600" />
        </div>
    }
    @if (_relatedGames.Any())
    {
        <CarouselMultiple Title="@(_game is not null ? "Juegos relacionados" : "Otros juegos")" Games="_relatedGames" />
    }
}

@code {

    [Parameter]
    public string? Name { get; set; }

    private Game? _game = null;
    private List<Game> _relatedGames = new();
    private bool _isLoading = false;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        if (Name is not null)
            _game = await _gameService.GetGame(StringHelper.FormatToNonUrlName(Name));
        _isLoading = false;
        if (_game is not null)
            _relatedGames = await _gameService.SearchGames("", new GameFilters() { Category = _game.Category });
        else
            _relatedGames = await _gameService.SearchGames("");
    }

}
